{"version":3,"sources":["../node_modules/pokemon/data sync /^/.//.*/.json$","PokemonSearch.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","PokemonSearch","state","search","pokemon","loading","bindField","value","onChange","setState","target","handleSubmit","preventDefault","fetchPokemon","this","fetch","res","json","data","fetched","notFound","Container","className","onSubmit","Input","type","Button","onClick","findByField","name","src","sprites","front_default","back_default","Component","render","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6IAAA,IAAIA,EAAM,CACT,YAAa,IACb,YAAa,GACb,YAAa,IACb,YAAa,IACb,YAAa,IACb,YAAa,IACb,iBAAkB,IAClB,iBAAkB,KAInB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,K,mMCvBdY,E,2MACJC,MAAQ,CACNC,OAAQ,GACRC,QAAS,KACTC,SAAS,G,EAGXC,UAAY,iBAAO,CACjBC,MAAO,EAAKL,MAAMC,OAClBK,SAAU,SAAAf,GAAC,OAAI,EAAKgB,SAAS,CAAEN,OAAQV,EAAEiB,OAAOH,W,EAGlDI,aAAe,SAAAlB,GACbA,EAAEmB,iBACF,EAAKC,aAAa,EAAKX,MAAMC,S,qHAGXd,G,gFAClByB,KAAKL,SAAS,CAAEJ,SAAS,I,SACPU,MAAM,qCAAD,OAAsC1B,I,cAAvD2B,E,gBACaA,EAAIC,O,OAAjBC,E,OACNJ,KAAKL,SAAS,CAAEL,QAASc,EAAMb,SAAS,I,sIAG/B,IAAD,EACqBS,KAAKZ,MAA1BE,EADA,EACAA,QAASC,EADT,EACSA,QACXc,GAAWd,GAAWD,GAAWA,EAAQf,GACzC+B,GAAYf,GAAWD,IAAYA,EAAQf,GAEjD,OACE,kBAACgC,EAAA,EAAD,KACE,0BAAMC,UAAU,aAAaC,SAAUT,KAAKH,cAC1C,kBAACa,EAAA,EAAD,iBAAWV,KAAKR,YAAhB,CAA6BmB,KAAK,YAAY,IAC9C,kBAACC,EAAA,EAAD,CAAQC,QAASb,KAAKc,aAAtB,iBAEDvB,GAAW,2CAEXc,GACC,6BACE,6BACE,oCAAUf,EAAQf,GAAlB,KACA,gCAASe,EAAQyB,OAEnB,6BACE,yBAAKC,IAAK1B,EAAQ2B,QAAQC,gBAC1B,yBAAKF,IAAK1B,EAAQ2B,QAAQE,iBAK/Bb,GAAY,gD,GAlDOc,aAwD5BC,iBAAO,kBAAC,EAAD,MAAmBC,SAASC,eAAe,SACnCpC,QCnDKqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c48114a7.chunk.js","sourcesContent":["var map = {\n\t\"./de.json\": 145,\n\t\"./en.json\": 88,\n\t\"./fr.json\": 146,\n\t\"./ja.json\": 147,\n\t\"./ko.json\": 148,\n\t\"./ru.json\": 149,\n\t\"./zh-hans.json\": 150,\n\t\"./zh-hant.json\": 151\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 144;","import React, { Component } from 'react'\nimport { render } from 'react-dom'\nimport 'semantic-ui-css/semantic.min.css'\nimport 'pokemon'\nimport { Input, Button, Container } from 'semantic-ui-react'\n\nclass PokemonSearch extends Component {\n  state = {\n    search: '',\n    pokemon: null,\n    loading: false\n  }\n\n  bindField = () => ({\n    value: this.state.search,\n    onChange: e => this.setState({ search: e.target.value })\n  })\n\n  handleSubmit = e => {\n    e.preventDefault()\n    this.fetchPokemon(this.state.search)\n  }\n\n  async fetchPokemon (id) {\n    this.setState({ loading: true })\n    const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\n    const data = await res.json()\n    this.setState({ pokemon: data, loading: false })\n  }\n\n  render () {\n    const { pokemon, loading } = this.state\n    const fetched = !loading && pokemon && pokemon.id\n    const notFound = !loading && pokemon && !pokemon.id\n\n    return (\n      <Container>\n        <form className='search-bar' onSubmit={this.handleSubmit}>\n          <Input {...this.bindField()} type='number' />{' '}\n          <Button onClick={this.findByField}>検索</Button>\n        </form>\n        {loading && <div>Loading...</div>}\n\n        {fetched && (\n          <div>\n            <div>\n              <strong>[{pokemon.id}]</strong>\n              <strong>{pokemon.name}</strong>\n            </div>\n            <div>\n              <img src={pokemon.sprites.front_default} />\n              <img src={pokemon.sprites.back_default} />\n            </div>\n          </div>\n        )}\n\n        {notFound && <div> Not Found</div>}\n      </Container>\n    )\n  }\n}\n\nrender(<PokemonSearch />, document.getElementById('root'))\nexport default PokemonSearch\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './PokemonSearch'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}